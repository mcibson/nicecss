/* GRID SYSTEM
=============================================================================== */

/* MAX Width for Boxed Containers (@include container)
===============================================================================*/
$maxWidth: 1200px;


/**
 * Set your Breakpoint Withs here
 * If you want to add/remove breakpoints ... good luck
 * Max 6 Breakpoints (https://yellowlab.tools)
 * Default width is Mobile first  < 30em;
 *
 * VARIABLES
 * =========
 * width: min-width of breakpoint
 * $spacer: padding or margin of grid or card in specific breakpoint
 * $outerspacer: padding of containers (outer parents) - Should be the same like $spacer
 */

$gridmap: (
    // breakpoint ( width, $spacer, $outerspacer )
        default:    (   1px,  10px,  false),    // default is mobile first
        mobile:     ( 481px,  1rem,  false),
        tablet:     ( 769px,  false, false),
        notebook:   ( 961px,  false, false),
        desktop:    (1201px,  false, false),
        hd:         (1601px,  false, false)
);
/* Grids don't have Margins */
/* Cards have Margins on sides and can have borders*/

/* IMPORTANT */
/* Don't use Flex Shorthands as long as you support IE10 */

/* Default is a 12 Column grid. Set $grid--max if you need another amount of columns */

/* Change the Breakpoints in the $gridmap in the _shopConfig.scss file */
// warning: don't change anything here, except you know what you are doing


// Breakpoints
$mobile:   nth(map-get($gridmap, mobile),1);     // mobile landscape
$tablet:   nth(map-get($gridmap, tablet),1);     // tablet portrait
$notebook: nth(map-get($gridmap, notebook),1);   // notebook, netbook, tablet landscape
$desktop:  nth(map-get($gridmap, desktop),1);    // desktop
$hd:       nth(map-get($gridmap, hd),1);         // HD+


// SPACER
$spacer:            nth(map-get($gridmap, default),  2);
$spacer--mobile:    nth(map-get($gridmap, mobile),   2);
$spacer--tablet:    nth(map-get($gridmap, tablet),   2);
$spacer--notebook:  nth(map-get($gridmap, notebook), 2);
$spacer--desktop:   nth(map-get($gridmap, desktop),  2);
$spacer--hd:        nth(map-get($gridmap, hd),       2);


// OUTER SPACER
$container--spacer:           nth(map-get($gridmap, default),  3);
$container--spacer--mobile:   nth(map-get($gridmap, mobile),   3);
$container--spacer--tablet:   nth(map-get($gridmap, tablet),   3);
$container--spacer--notebook: nth(map-get($gridmap, notebook), 3);
$container--spacer--desktop:  nth(map-get($gridmap, desktop),  3);
$container--spacer--hd:       nth(map-get($gridmap, hd),       3);


// The Magic Fucntion - Get $spacer from active Breakpoint
@function get_spacer() {
    $spacing: $spacer; // Default Spacer
    // Check if min-width is set
    @if breakpoint-get-context('min-width') {
        // Convert breakpoint list value to string to number with unit
        $breakpoint_value: to-number( inspect( breakpoint-get-context('min-width') ) );

        // Loop through $breakpointsmap
        @each $breakpoint, $value in $gridmap {
            @if ( $breakpoint_value >=  nth($value,1) )  {
                $spacing: nth($value,2);
            }
        }
    }
    @return $spacing;
}


/* Container
=============================================================================== */

/* Container Base Mixins
=========================================================== */
@mixin container__padding {
    @if $container--spacer != false {
        padding-left: $container--spacer;
        padding-right: $container--spacer; }

    @include breakpoint($mobile) {
        @if $container--spacer--mobile != false {
            padding-left: $container--spacer--mobile;
            padding-right: $container--spacer--mobile; } }

    @include breakpoint($tablet) {
        @if $container--spacer--tablet != false {
            padding-left: $container--spacer--tablet;
            padding-right: $container--spacer--tablet; } }

    @include breakpoint($notebook) {
        @if $container--spacer--notebook != false {
            padding-left: $container--spacer--notebook;
            padding-right: $container--spacer--notebook; } }

    @include breakpoint($desktop) {
        @if $container--spacer--desktop != false {
            padding-left: $container--spacer--desktop;
            padding-right: $container--spacer--desktop; } }

    @include breakpoint($hd) {
        @if $container--spacer--hd != false {
            padding-left: $container--spacer--hd;
            padding-right: $container--spacer--hd; } }
}

/* Boxed Container
=========================================================== */
@mixin container {
    @include container__padding;
    display: flex;
    flex-wrap: wrap;
    flex-direction: row;
    width: 100%;
    max-width: $maxWidth;
    margin: 0 auto;
}

/* Full Width Container
=========================================================== */
@mixin container--fluid {
    display: flex;
    flex-wrap: wrap;
    flex-direction: row;
    width: 100%;
    margin: 0 auto;
}

/* Nested Container
=========================================================== */
@mixin container--nospace {
    display: flex;
    flex-wrap: wrap;
    flex-direction: row;
    width: 100%;
    max-width: $maxWidth;
    margin: 0 auto;
}

/* Single Row Container - nowrap - boxed
=========================================================== */
@mixin container--row {
    display: flex;
    flex-wrap: nowrap;
    @include container__padding;
}


/* Grid Base Mixins
=============================================================================== */
/* BEM Mixins - These Mixins are Are BEM Elements (Block__Element--Modifier */
@mixin width($grid:12, $grid--max:12) {
    width: percentage($grid / $grid--max);
}


@mixin padding(){
    padding: $spacer;

    @if $spacer--mobile != false {
        @include breakpoint($mobile) {
            padding: $spacer--mobile; } }

    @if $spacer--tablet != false {
        @include breakpoint($tablet) {
            padding: $spacer--tablet;} }

    @if $spacer--notebook != false {
        @include breakpoint($notebook) {
            padding: $spacer--notebook;} }

    @if $spacer--desktop != false {
        @include breakpoint($desktop) {
            padding: $spacer--desktop;} }

    @if $spacer--hd != false {
        @include breakpoint($hd) {
            padding: $spacer--hd;} }
}
@mixin padding--default() { // padding left, right and double bottom
    padding: 0 $spacer 2*$spacer;

    @if $spacer--mobile != false {
        @include breakpoint($mobile) {
            padding: 0 $spacer--mobile 2*$spacer--mobile; } }

    @if $spacer--tablet != false {
        @include breakpoint($tablet) {
            padding: 0 $spacer--tablet 2*$spacer--tablet;} }

    @if $spacer--notebook != false {
        @include breakpoint($notebook) {
            padding: 0 $spacer--notebook 2*$spacer--notebook;} }

    @if $spacer--desktop != false {
        @include breakpoint($desktop) {
            padding: 0 $spacer--desktop 2*$spacer--desktop;} }

    @if $spacer--hd != false {
        @include breakpoint($hd) {
            padding: 0 $spacer--hd 2*$spacer--hd;} }
}
@mixin padding--horizontal(){
    padding-left: $spacer;
    padding-right: $spacer;

    @if $spacer--mobile != false {
        @include breakpoint($mobile) {
            padding-left: $spacer--mobile;
            padding-right: $spacer--mobile; } }

    @if $spacer--tablet != false {
        @include breakpoint($tablet) {
            padding-left: $spacer--tablet;
            padding-right: $spacer--tablet; } }

    @if $spacer--notebook != false {
        @include breakpoint($notebook) {
            padding-left: $spacer--notebook;
            padding-right: $spacer--notebook; } }

    @if $spacer--desktop != false {
        @include breakpoint($desktop) {
            padding-left: $spacer--desktop;
            padding-right: $spacer--desktop; } }

    @if $spacer--hd != false {
        @include breakpoint($hd) {
            padding-left: $spacer--hd;
            padding-right: $spacer--hd; } }
}

@mixin margin() { // margin on all sides
    margin: $spacer;

    @if $spacer--mobile != false {
        @include breakpoint($mobile) {
            margin: $spacer--mobile; } }

    @if $spacer--tablet != false {
        @include breakpoint($tablet) {
            margin: $spacer--tablet;} }

    @if $spacer--notebook != false {
        @include breakpoint($notebook) {
            margin: $spacer--notebook;} }

    @if $spacer--desktop != false {
        @include breakpoint($desktop) {
            margin: $spacer--desktop;} }

    @if $spacer--hd != false {
        @include breakpoint($hd) {
            margin: $spacer--hd;} }
}
@mixin margin--default() { // margin left, right and double bottom
    margin: 0 $spacer 2*$spacer;

    @if $spacer--mobile != false {
        @include breakpoint($mobile) {
            margin: 0 $spacer--mobile 2*$spacer--mobile; } }

    @if $spacer--tablet != false {
        @include breakpoint($tablet) {
            margin: 0 $spacer--tablet 2*$spacer--tablet;} }


    @if $spacer--notebook != false {
        @include breakpoint($notebook) {
            margin: 0 $spacer--notebook 2*$spacer--notebook;} }

    @if $spacer--desktop != false {
        @include breakpoint($desktop) {
            margin: 0 $spacer--desktop 2*$spacer--desktop;} }

    @if $spacer--hd != false {
        @include breakpoint($hd) {
            margin: 0 $spacer--hd 2*$spacer--hd;} }
}
@mixin margin--horizontal(){
    margin-left: $spacer;
    margin-right: $spacer;

    @if $spacer--mobile != false {
        @include breakpoint($mobile) {
            margin-left: $spacer--mobile;
            margin-right: $spacer--mobile; } }

    @if $spacer--tablet != false {
        @include breakpoint($tablet) {
            margin-left: $spacer--tablet;
            margin-right: $spacer--tablet; } }

    @if $spacer--notebook != false {
        @include breakpoint($notebook) {
            margin-left: $spacer--notebook;
            margin-right: $spacer--notebook; } }

    @if $spacer--desktop != false {
        @include breakpoint($desktop) {
            margin-left: $spacer--desktop;
            margin-right: $spacer--desktop; } }

    @if $spacer--hd != false {
        @include breakpoint($hd) {
            margin-left: $spacer--hd;
            margin-right: $spacer--hd; } }
}


/* Standard Grid - Only Horizontal Padding
=============================================================================== */
@mixin grid($grid: 12, $grid--max: 12) {
    @include padding--horizontal;
    @include width($grid, $grid--max);


    @include jacket(ie) {
        float: left;
    }
}

/* Grid without padding - use for nested Grids
=============================================================================== */
@mixin grid--nospace($grid: 12, $grid--max: 12) {
    width: percentage($grid / $grid--max);

    //@include jacket(ie) {
    //    float: left;
    //}
}

/* Grid collapses outer padding --- NOT TESTED
=============================================================================== */
@mixin grid--collapse($grid: 12, $grid--max: 12) {
    width: percentage($grid / $grid--max);
    margin-left: $spacer * -1;
    margin-right: $spacer * -1;

    @if $spacer--mobile != false {
        @include breakpoint($mobile) {
            margin-left: $spacer--mobile * -1;
            margin-right: $spacer--mobile * -1; } }

    @if $spacer--tablet != false {
        @include breakpoint($tablet) {
            margin-left: $spacer--tablet * -1;
            margin-right: $spacer--tablet * -1; } }

    @if $spacer--notebook != false {
        @include breakpoint($notebook) {
            margin-left: $spacer--notebook * -1;
            margin-right: $spacer--notebook * -1; } }

    @if $spacer--desktop != false {
        @include breakpoint($desktop) {
            margin-left: $spacer--desktop * -1;
            margin-right: $spacer--desktop * -1; } }

    @if $spacer--hd != false {
        @include breakpoint($hd) {
            margin-left: $spacer--hd * -1;
            margin-right: $spacer--hd * -1; } }
}


/* Card Mixin
=============================================================================== */
@mixin card__width($grid:6, $grid--max:12) {
    width: calc(#{percentage($grid / $grid--max)} - 2 * #{get_spacer()});
}
@mixin card($grid: 6, $grid--max: 12) {
    @include margin--default();
    @include padding;
    @include width($grid, $grid--max);


    //@include jacket(ie) { // IE9 fallback
    //    float: left;
    //}
}


/* CLEARFIX Mixin
=============================================================================== */
// Replace all clearfix Classes with this mixin for IE9 and lower
// Most clearfixes will be removed for modern Browsers soon.
@mixin clearfix {
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}


/* STANDARD CLASSES
=============================================================================== */
//


